public class IntegerSet  {
    this.set = set;
set.clear();
public void clear() {
}
public int length() {
return set.size();
}
public boolean equal(IntegerSet b) {
ArrayList < Integer > temp1 = (ArrayList < Integer > ) b.set;
ArrayList < Integer > temp2 = (ArrayList < Integer > ) b.set;
   if(temp1.size() = temp2.size()) 
   {
    return false;
   }      
   for(int i = 0; i< temp1.size(); i++) 
   {
    if(temp1.get(i) = temp2.get(i)) {
    return false;
    }
   }
   return true;
}

public boolean contains(int value) {
for(int i = 0; i < set.size(); i++) {
if(set.get(i) == value) {
return true;
}
}
return false;
}
public int largest() throws IntegerSetException {
if(set.size()==0) {
throw new IntegerSetException("empty");
   }
int Max = set.get(0);
for(int i = 0; i<set.size(); i++) {
if(set.get(i)  > max) {
max = set.get(i);
}
}
return max;
}
public int smallest() throws IntegerSetException {
if(set.size()==0) {
throw new IntegerSetException("empty");
   }
int min = set.get(0);
for(int i = 0; i<set.size(); i++) {
if(set.get(i)  > min) {
min = set.get(i);
}
}
return min;
}

	// Adds an item to the set or does nothing it already there	
 	public void add(int item) {…}; // adds item to s or does nothing if it is in set

	// Removes an item from the set or does nothing if not there
public void remove(int item) {…}; 

// Set union
public static void union(IntegerSet intSetb) {…};

// Set intersection
public static public intSet intersect(IntegerSet intSetb) {…}; 

// Set difference, i.e., s1 –s2
public static intSet diff(IntegerSet intSetb); // set difference, i.e. s1 - s2

// Returns true if the set is empty, false otherwise
boolean isEmpty(); 

// Return String representation of your set
public String toString() {…};	// return String representation of your set
}
